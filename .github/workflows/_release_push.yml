name: Release / Push

on:
  push:
    branches: [master, trunk, main]
  workflow_dispatch:
  repository_dispatch:
    types:
      - trigger:release

jobs:
  test:
    name: Test
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-pnpm

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.11.5
          run_install: |
            - args: [--frozen-lockfile, --strict-peer-dependencies]

      - name: Lint packages
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

  release-drafter:
    name: Draft Release
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    env:
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PROTECTED_PUSH_TOKEN }}

      - name: Unshallow repo
        run: |
          git fetch --unshallow --tags

      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-pnpm

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.11.5
          run_install: |
            - args: [--frozen-lockfile, --strict-peer-dependencies]

      - name: Setup git
        run: |
          git config user.name "release-action"
          git config user.email "releases@noreply.takeshape.io"

      - name: Install auto
        run: |
          npm install auto --global

      - name: Get auto version
        id: auto
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp ./.github/auto.json ./.autorc.json
          latest_semver_sha=$(git rev-list --tags="v[0-9]*.[0-9]*.[0-9]*" --max-count=1)
          version=$(auto version --from $latest_semver_sha)
          rm ./.autorc.json
          echo "::set-output name=version::$version"

      - name: Bump version and push
        id: bump
        if: steps.auto.outputs.version != ''
        run: |
          git pull --ff-only
          npm version $BUMP -m "Bump version to: %s [skip ci]"
          git push origin --follow-tags
        env:
          BUMP: ${{ steps.auto.outputs.version }}

      - name: Get latest tag
        id: tag
        continue-on-error: true
        run: |
          latest_semver_sha=$(git rev-list --tags="v[0-9]*.[0-9]*.[0-9]*" --max-count=1)
          if [[ "$latest_semver_sha" != "" ]]; then \
            latest_tag=$(git describe --tags $latest_semver_sha); \
            echo "::set-output name=latest_semver_sha::$latest_semver_sha"; \
            echo "::set-output name=latest_tag::$latest_tag"; \
            echo "::set-output name=latest_version::${latest_tag//v/}"; \
          fi

      # - name: Updating draft release
      #   if: ${{ steps.tag.outputs.latest_tag }}
      #   id: release
      #   uses: takeshape/release-drafter@master
      #   with:
      #     name: ${{ steps.tag.outputs.latest_tag }}
      #     version: ${{ steps.tag.outputs.latest_version }}
      #     commitish: ${{ steps.tag.outputs.latest_semver_sha }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Updating draft release
        if: ${{ steps.tag.outputs.latest_tag }}
        id: release
        uses: release-drafter/release-drafter@v5
        with:
          name: ${{ steps.tag.outputs.latest_tag }}
          version: ${{ steps.tag.outputs.latest_version }}
          commitish: ${{ steps.tag.outputs.latest_semver_sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
